meta{
   title: "Possibly outdated features";
   version: "0.1";
   description: "Warn against features that are susceptible to change (in real life) but haven't been touched in a while (on OSM).";
   author: "smootheFiets";
}


/* All dates are hard-wired in the code, which is undesirable. */
/* I'd much rather define a maximum acceptable 'age' per feature, and let JOSM search for that. */
/* I couldn't find a way to make that happen, though. */
/* Syntax: 'timestamp:/2019' means timestamps before 2019-01-01 */


area[landuse=construction][JOSM_search("timestamp:/2019")]!:modified
{
   throwWarning: tr("landuse=construction hasn't been touched in a while. Is construction work still ongoing?");
}
area[landuse=brownfield][JOSM_search("timestamp:/2019")]!:modified
{
   throwWarning: tr("landuse=brownfield hasn't been touched in a while. Is this area being used?");
}

node[amenity=post_box][JOSM_search("timestamp:/2019")]!:modified{
   throwWarning: tr("Postbox hasn't been touched in a while, does it still exist?");
}


*[amenity=bench],
*[leisure=picnic_table],
*[tourism=picnic_site]{
   set seating;
}
*.seating[JOSM_search("timestamp:/2018")]!:modified{
   throwWarning: tr("{0} hasn't been touched in a while; does it still exist?", "{0.tag}");
}
/* FIXME: {0.tag} doesn't give me what I need (want: amenity=bench and such) */
/*  *[amenity=bench],
*[leisure=picnic_table],
*[tourism=picnic_site]{
   throwWarning: tr("dummy {0}", "{0.tag}");
}   */
/* debugging: I got the syntax right, in principle.  The problem's the class.  */

